//////////////////////////////////////////////////////////////////////////////
// Model: blinky.qm
// File:  ./blinky.ino
//
// Modified by : Anky
// ********* To compile on MAPLE REV3+ platforms ********* 
// Controller : STM32F103RBT6 - Cortex-M3
//
// This code has been generated by QM tool (see state-machine.com/qm).
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//////////////////////////////////////////////////////////////////////////////
// @(/2/0) ...................................................................
#include "qp_port.h"

Q_DEFINE_THIS_FILE

using namespace QP;

#define BSP_TICKS_PER_SEC 1000

  // 1000 ticks per second = 0.001 => 1000 microseconds
  // Formula ( (1/BSP_TICKS_PER_SEC) * 1000 * 1000 )

/*!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
* Assign a priority to EVERY ISR explicitly by calling NVIC_SetPriority().
* DO NOT LEAVE THE ISR PRIORITIES AT THE DEFAULT VALUE!
*/
enum KernelUnawareISRs {                                      /* see NOTE00 */
    /* ... */
    MAX_KERNEL_UNAWARE_CMSIS_PRI                        /* keep always last */
};
/* "kernel-unaware" interrupts can't overlap "kernel-aware" interrupts */
//Q_ASSERT_COMPILE(MAX_KERNEL_UNAWARE_CMSIS_PRI <= QF_AWARE_ISR_CMSIS_PRI);

enum KernelAwareISRs {
    NVIC_TIMER2_PRIO = QF_AWARE_ISR_CMSIS_PRI,                  /* see NOTE00 */
    SYSTICK_PRIO,
    /* ... */
    MAX_KERNEL_AWARE_CMSIS_PRI                          /* keep always last */
};
/* "kernel-aware" interrupts should not overlap the PendSV priority */
//Q_ASSERT_COMPILE(MAX_KERNEL_AWARE_CMSIS_PRI <= (0xFF >>(8-__NVIC_PRIO_BITS)));

enum BlinkySignals { // signals for the Blinky application
    TIMEOUT_SIG = Q_USER_SIG
};

//............................................................................
void BSP_init(void) {
  pinMode(BOARD_LED_PIN,OUTPUT);
  pinMode(BOARD_BUTTON_PIN, INPUT);
}
//............................................................................
void BSP_ledOff(void) {
    digitalWrite(BOARD_LED_PIN,LOW);
}
//............................................................................
void BSP_ledOn(void) {
    digitalWrite(BOARD_LED_PIN,HIGH);
}
//............................................................................
void Timer2_ISR_Handler (void)
{
    QK_ISR_ENTRY();            /* inform QP about ISR entry */
    QF::TICK((void *)0);   /* process all armed time events */
    QK_ISR_EXIT();              /* inform QP about ISR exit */
}

//............................................................................
void QF::onStartup(void) {
  
  nvic_irq_set_priority( NVIC_TIMER2,NVIC_TIMER2_PRIO);
    // set Timer2 in CTC mode, 1/1024 prescaler, start the timer ticking
    // Setup Timer
  Timer2.setChannel1Mode(TIMER_OUTPUTCOMPARE);
  Timer2.setPeriod(BSP_TICKS_PER_SEC); // in microseconds
  Timer2.setCompare1(1);      // overflow might be small
  Timer2.attachCompare1Interrupt(Timer2_ISR_Handler); 
}
//............................................................................
void QF::onCleanup(void) {
}
//............................................................................
void QF::onIdle() {
  QF_INT_ENABLE(); // re-enable interrupts
                   // TODO: Sleep function for low power mode 
}
//............................................................................
void Q_onAssert(char const Q_ROM * const Q_ROM_VAR file, int line) {
    QF_INT_DISABLE(); // disable all interrupts
    BSP_ledOn(); // User LED permanently ON
    for (;;) {       /* NOTE: replace the loop with reset for final version */
    }
}

//============================================================================
// generate code for the Blinky application...
// @(/1/0) ...................................................................
class Blinky : public QP::QActive {
public:
    QTimeEvt m_timeEvt;

public:
    Blinky()
      : QActive(Q_STATE_CAST(&Blinky::initial)),
        m_timeEvt(TIMEOUT_SIG) 
    {
        // empty
    }

protected:
    static QP::QState initial(Blinky * const me, QP::QEvt const * const e);
    static QP::QState off(Blinky * const me, QP::QEvt const * const e);
    static QP::QState on(Blinky * const me, QP::QEvt const * const e);
};

// @(/1/0) ...................................................................

// @(/1/0/2) .................................................................
// @(/1/0/2/0)
QP::QState Blinky::initial(Blinky * const me, QP::QEvt const * const e) {
    me->m_timeEvt.postEvery(me, BSP_TICKS_PER_SEC);
    return Q_TRAN(&Blinky::off);
}
// @(/1/0/2/1) ...............................................................
QP::QState Blinky::off(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // @(/1/0/2/1)
        case Q_ENTRY_SIG: {
            BSP_ledOff();
            status_ = Q_HANDLED();
            break;
        }
        // @(/1/0/2/1/0)
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky::on);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status_;
}
// @(/1/0/2/2) ...............................................................
QP::QState Blinky::on(Blinky * const me, QP::QEvt const * const e) {
    QP::QState status_;
    switch (e->sig) {
        // @(/1/0/2/2)
        case Q_ENTRY_SIG: {
            BSP_ledOn();
            status_ = Q_HANDLED();
            break;
        }
        // @(/1/0/2/2/0)
        case TIMEOUT_SIG: {
            status_ = Q_TRAN(&Blinky::off);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm::top);
            break;
        }
    }
    return status_;
}


//............................................................................
static Blinky l_blinky;                           // instantiate the Blinky AO
QActive *AO_Blinky = &l_blinky;     // initialize the global pointer to Blinky

//............................................................................
void setup() {
    
    BSP_init(); // initialize the BSP
    QF::init(); // initialize the framework and the underlying RT kernel

    static QEvt const *blinky_queueSto[30]; // alocate event queue buffer
    AO_Blinky->start(1, blinky_queueSto, Q_DIM(blinky_queueSto),
                     (void *)0, 0U);        // start the Blinky active object
}

//////////////////////////////////////////////////////////////////////////////
// NOTE1: Do not define the loop() function, because this function is
// already defined in the QP port to Arduino


